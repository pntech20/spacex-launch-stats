{"version":3,"sources":["logo.png","components/Launch.js","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LAUNCH_QUERY","gql","Launch","flight_number","match","params","useQuery","variables","parseInt","loading","error","data","launch","mission_name","launch_year","launch_success","rocket","rocket_id","rocket_name","rocket_type","className","to","LaunchItem","launch_date_local","format","MissionKey","LAUNCHES_QUERY","Launches","launches","map","index","key","client","ApolloClient","uri","cache","InMemoryCache","App","src","logo","alt","style","width","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.25bc4e63.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ab10d000.png\";","import { gql, useQuery } from '@apollo/client';\nimport React from 'react';\nimport { Link } from 'react-router-dom'\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_date_local\n      launch_success\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nconst Launch = ({ match: { params: { flight_number } } }) => {\n  const { loading, error, data } = useQuery(LAUNCH_QUERY, {\n    variables: {\n      flight_number: parseInt(flight_number)\n    }\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  const {\n    mission_name,\n    launch_year,\n    launch_success,\n    rocket: {\n      rocket_id,\n      rocket_name,\n      rocket_type,\n    }\n  } = data.launch;\n  return <>\n    <h1 className='display-4 my-3'>\n      <span className='text-dark'>Mission: </span>{' '}{mission_name}\n    </h1>\n    <h4 className='mb-3'>Launch details</h4>\n    <ul className='list-group'>\n      <li className='list-group-item'>\n        Flight number: {flight_number}\n      </li>\n      <li className='list-group-item'>\n        Launch year: {launch_year}\n      </li>\n      <li className='list-group-item'>\n        Launch success: <span className={launch_success ? 'text-success' : 'text-danger'}>{launch_success ? 'Yes' : 'No'}</span>\n      </li>\n    </ul>\n    <h4 className='my-3'>Rocket details</h4>\n    <ul className='list-group'>\n      <li className='list-group-item'>\n        Rocket ID: {rocket_id}\n      </li>\n      <li className='list-group-item'>\n        Rocket name: {rocket_name}\n      </li>\n      <li className='list-group-item'>\n        Rocket type: {rocket_type}\n      </li>\n    </ul>\n    <hr />\n    <Link to='/' className='btn btn-secondary'>Back</Link>\n  </>\n}\n\nexport default Launch\n","import React from 'react'\nimport Moment from 'react-moment'\nimport { Link } from 'react-router-dom'\n\nconst LaunchItem = ({ launch: { flight_number, mission_name, launch_date_local, launch_success } }) => {\n  return (\n    <div className='card card-body mb-3'>\n      <div className='row'>\n        <div className='col-md-9'>\n          <h4>Mission: <span className={launch_success ? 'text-success' : 'text-danger'}>{mission_name}</span></h4>\n          <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment></p>\n        </div>\n        <div className='col-md-3'>\n          <Link to={`/launch/${flight_number}`} className='btn btn-secondary'>Launch Details</Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default LaunchItem","import React from 'react'\n\nconst MissionKey = () => {\n  return (\n    <div className='my-3 '>\n      <p>\n        <span className='px-3 mr-2 bg-success' /> = Success\n      </p>\n      <p>\n        <span className='px-3 mr-2 bg-danger' /> = Fail\n      </p>\n    </div>\n  )\n}\n\nexport default MissionKey\n","import { gql, useQuery } from '@apollo/client';\nimport React from 'react';\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nconst Launches = () => {\n  const { loading, error, data } = useQuery(LAUNCHES_QUERY);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return <>\n    <h1 className='display-4 my-3'>Launches</h1>\n    <MissionKey />\n    {\n      data.launches.map((launch, index) => (\n        <LaunchItem launch={launch} key={index} />\n      ))\n    }\n  </>\n}\n\nexport default Launches\n","import { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route\n} from 'react-router-dom';\nimport './App.css';\nimport Launch from './components/Launch';\nimport Launches from './components/Launches';\nimport logo from './logo.png';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache()\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client} >\n      <Router>\n        <div className=\"container\">\n          <img\n            src={logo}\n            alt='logo'\n            style={{ width: 300, display: 'block', margin: 'auto' }}\n          />\n          <Route exact path='/' component={Launches} />\n          <Route exact path='/launch/:flight_number' component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}